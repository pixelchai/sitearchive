<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>pixelzerg.github.io</title>
   
   <link>http://pixelzerg.github.io/</link>
   <description>A website of games, code, how tos, language, music, 3D modeling and animating, general art, literature, etc. Anything that I, and hopefully you, find interesting.</description>
   <language>en-uk</language>
   <managingEditor> PixelZerg</managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>CodeComplexifier - Complex Booleans</title>
	  <link>/Cmplxfr1</link>
	  <author>PixelZerg</author>
	  <pubDate>2015-11-24T06:42:45+00:00</pubDate>
	  <guid>/Cmplxfr1</guid>
	  <description><![CDATA[
	     <p>A new project that I am asynchronously starting with my <a href="/tag/UniversalProgram">Universal Program</a> project!
This project is going to, essentially, be a code complexifier. Probably wouldn&#39;t exactly be obfuscation, but it will generate code that will most likely be unreadable to the untrained eye.</p>

<p>This program rewrites your code, but using the most complex and ineficient ways of doing things. I don&#39;t really see why anyone will need this, but it is cool nonetheless.</p>

<p>Okay, let&#39;s get started by making the conditions unnecessarily complex!</p>

<h3><u>Booleans</u></h3>

<p>Whenever you do a condition, the condition always has to be a boolean.
In while loops, if statements, etc.
Say, for example, you have a condition <code>no != 10</code>. You might be using it in a while loop, for example:
<pre><code class="hljs csharp">
int no = 0;
while(no != 10)
{
    no++;
}
</code></pre></p>

<p>Since the condition is a boolean, you can easily add <code>== true</code> to the end without it affecting the code. After all, the condition is just the short-hand way of writing that.
<pre><code class="hljs csharp">
int no = 0;
while(no != 10 == true)
{
    no++;
}
</code></pre></p>

<p>Now, there are many ways we could say <code>true</code>. If we felt particularly groovy that day, we could write <code>no != 10 == !false</code> because !false = true.</p>

<p>Heck, we could even write <code>no != 10 != !!false</code>
Or this: <code>no != 10 != !!false != !false != true</code></p>

<p>This is because <code>!false</code>,<code>!= !!false != !false != true</code>,<code>!= !!false</code> are all ways of saying <code>true</code>.
Now let&#39;s make a method that replaces every instance of <code>true</code> in the statement with one of these more complex ways of expressing <code>true</code>.
Like I mentioned earlier, we can always add <code>== true</code> to any condition without making a difference. Even if the condition already has <code>== true</code> at the end:</p>

<p><code>true == true == true</code> = <code>true == true</code> = <code>true</code>.</p>

<p>So you don&#39;t need to worry about a condition without an instance of <code>true</code> in it, we can just add one right at the start.</p>

<p>Ok, great, our method has made the condition slightly more complex. Now how about putting <em>that</em> condition through the algorithm again. It will be even more complex!</p>

<p>Since my method replaces EVERY instance of <code>true</code> found with a random way of expressing <code>true</code>, the complexity will actually increase exponentially.</p>

<p>Here&#39;s the method:
<pre><code class="hljs csharp">public string complexifyCondition(string cond, int times)
        {
            Console.Write(&quot;complexifying...&quot;);
            string[] trues = new string[] { &quot;!true == !true&quot;, &quot;true != !true&quot;+Environment.NewLine, &quot;!!!true != !!true&quot;, &quot;!false != !true&quot;+Environment.NewLine, &quot;!!false != true != !false == !true&quot;
            ,&quot;!!!false == !!true&quot;};
            string ret = cond+&quot; == true&quot;;
            int no = times;
            while (no != 0)
            {
                var regex = new Regex(Regex.Escape(&quot;true&quot;));
                int na = Regex.Matches(ret, &quot;true&quot;).Count;
                while (na != 0)
                {
                    var newText = regex.Replace(ret, trues[r.Next(trues.Length)], 1);
                    ret = newText;
                    na--;
                    // Console.Write(&quot;.&quot;);
                }
                //Console.ForegroundColor = ConsoleColor.Red;
                //Console.Write(&quot;.&quot;);
                //Console.ResetColor();
                no--;
            }
            System.Windows.Forms.Clipboard.SetText(ret);
            return ret;
        }</code></pre></p>

<p>Let&#39;s give it a spin!
Let&#39;s input our example condition <code>no != 10</code>:
<table><tbody>
<tr><th>Times</th><th>Output</th></tr>
<tr><td>0</td><td>no != 10 == true</td></tr>
<tr><td>1</td><td>no != 10 == !!!true != !!true</td></tr>
<tr><td>2</td><td>no != 10 == !false != !!!!false == !!true</td></tr>
<tr><td>3</td><td>no != 10 == !!!!!false != !!!false == !!!!false != !!!false == !!!!false != true != !false == !true != !false == !true
!= !false == !true != !!true</td></tr>
<tr><td>4</td><td>no != 10 == !!false != !!!false != !false != !!!!false == !!!!!!!!false == !!!!!false == !!!!false != true != !false == !true != !!true != !true!= !true!= !false == !true== !true</td></tr>
</tbody>
</table>
etc...
<a href="http://pastebin.com/zrQj6KBu">Here</a> is the output when the complexity is set to 19.
I probably won&#39;t be able to run it on my secondary computer (because it is slow), but, theoretically if you replace <code>no != 10</code> at the start with <code>bool b =</code>,
the value of the boolean should be <code>True</code>!</p>

<p>See, this is why </p>

<blockquote>
<p>Oh i&#39;ve written 5000 lines of code broo!</p>
</blockquote>

<p>means very little to me. To all those who have ever said that, I say: </p>

<blockquote>
<p>Oh i&#39;ve written 7,264 lines of code in like 10 seconds broo!</p>
</blockquote>

<p>7,264 lines of code for only a simple boolean &quot;true&quot;. How&#39;s that for complex booleans?
And the complexity was only set to 19... </p>

<p>I wouldn&#39;t recommend going above 10, however. Your computer might have a hard time generating the condition. When I pasted that code into Visual Studio, it insta-crashed on this pc <strong>x_x</strong></p>

<h3><u>What my initial intentions were</u></h3>

<p>I initially intended to make an algorithm that would do the following:
<pre><code class="hljs csharp">
int no = 0;
while(no != 10)
{
    no++;
}</p>

<h2></code></pre></h2>

<p>Converted to:
<pre><code class="hljs csharp">
private int Do(int no){
return no+=1;
}
private bool Check(int no){
return no != 10;
}
int no = 0;
:foo
no = Do(no);
if(!Check(no)){
goto foo;
}
</code></pre></p>

<p>Notice how the code is now suddenly more complex. Making that code is quite complex, though, because you will need to work out which variables to pass etc etc. I somehow started experimenting with bools and now this happened.
I also made a method to actually parse the condition from a loop/statement:
<pre><code class="hljs csharp">public string GetBoolfloop(string lname, params string[]raw)
        {
            foreach (var loc in raw)
            {
                if (loc.Contains(lname))
                {
                    //Console.WriteLine(&quot;located loop def :&quot; + loc);
                    string only = loc.Substring(loc.IndexOf(lname));
                   // Console.WriteLine(&quot;isolated: &quot;+only);
                    string boolarg = &quot;&quot;;
                    bool started = false;
                    foreach (var s in only)
                    {
                        if (s == &#39;)&#39;) started = false;
                        if (started)
                        {
                            boolarg += s;
                        }
                        if (s == &#39;(&#39;) started = true;
                    }
                 //   Console.WriteLine(&quot;isolated boolarg: &quot; + boolarg);
                    return boolarg;
                }
            }
            return &quot;&quot;;
        }</code></pre>
And a method to get the code within the loop/statement:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="kt">string</span> <span class="nf">GetCodefbrackets</span><span class="p">(</span><span class="kt">string</span> <span class="n">sbracket</span><span class="p">,</span><span class="kt">string</span> <span class="n">ebracket</span><span class="p">,</span> <span class="k">params</span> <span class="kt">string</span><span class="p">[]</span> <span class="n">code</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">string</span> <span class="n">ret</span> <span class="p">=</span> <span class="s">""</span><span class="p">;</span>
            <span class="kt">bool</span> <span class="n">started</span> <span class="p">=</span> <span class="k">false</span><span class="p">;</span>
            <span class="k">foreach</span> <span class="p">(</span><span class="n">var</span> <span class="n">loc</span> <span class="k">in</span> <span class="n">code</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">loc</span><span class="p">.</span><span class="nf">Contains</span><span class="p">(</span><span class="n">ebracket</span><span class="p">))</span>
                <span class="p">{</span>
                    <span class="n">started</span> <span class="p">=</span> <span class="k">false</span><span class="p">;</span>
                    <span class="n">ret</span> <span class="p">+=</span> <span class="n">Environment</span><span class="p">.</span><span class="n">NewLine</span><span class="p">+</span><span class="n">loc</span><span class="p">.</span><span class="nf">Replace</span><span class="p">(</span><span class="n">ebracket</span><span class="p">,</span> <span class="s">""</span><span class="p">);</span>
                    <span class="k">continue</span><span class="p">;</span>
                <span class="p">}</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">started</span><span class="p">)</span>
                <span class="p">{</span>
                    <span class="n">ret</span> <span class="p">+=</span> <span class="n">Environment</span><span class="p">.</span><span class="n">NewLine</span> <span class="p">+</span> <span class="n">loc</span><span class="p">;</span>
                <span class="p">}</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">loc</span><span class="p">.</span><span class="nf">Contains</span><span class="p">(</span><span class="n">sbracket</span><span class="p">))</span>
                <span class="p">{</span>
                    <span class="n">started</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span>
                    <span class="n">ret</span> <span class="p">+=</span> <span class="n">loc</span><span class="p">.</span><span class="nf">Substring</span><span class="p">(</span><span class="n">loc</span><span class="p">.</span><span class="nf">IndexOf</span><span class="p">(</span><span class="n">sbracket</span><span class="p">)+</span><span class="m">1</span><span class="p">);</span>
                 <span class="c1">//   Console.WriteLine(ret);
</span>                <span class="p">}</span>
            <span class="p">}</span>
            <span class="c1">//Console.WriteLine(ret);
</span>            <span class="k">return</span> <span class="n">ret</span><span class="p">;</span>
        <span class="p">}</span></code></pre></figure>

<hr>

<!-- footer -->

<p>Time taken to write: An hour and a bit</p>

<hr>

<!-- Ack -->

<p><small><small><small><a href="http://commons.wikimedia.org/wiki/File:Monotone_Boolean_functions.svg">Cover Image</a> by <a href="https://commons.wikimedia.org/wiki/User:David_Eppstein/Gallery">David Eppstein</a>. It has not been edited.</small></small></small></p>

	  ]]></description>
	</item>


</channel>
</rss>
