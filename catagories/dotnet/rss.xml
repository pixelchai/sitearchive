<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>pixelzerg.github.io</title>
   
   <link>http://pixelzerg.github.io/</link>
   <description>A website of games, code, how tos, language, music, 3D modeling and animating, general art, literature, etc. Anything that I, and hopefully you, find interesting.</description>
   <language>en-uk</language>
   <managingEditor> PixelZerg</managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>CodeComplexifier - Complex Booleans</title>
	  <link>/Cmplxfr1</link>
	  <author>PixelZerg</author>
	  <pubDate>2015-11-24T06:42:45+00:00</pubDate>
	  <guid>/Cmplxfr1</guid>
	  <description><![CDATA[
	     <p>A new project that I am asynchronously starting with my <a href="/tag/UniversalProgram">Universal Program</a> project!
This project is going to, essentially, be a code complexifier. Probably wouldn&#39;t exactly be obfuscation, but it will generate code that will most likely be unreadable to the untrained eye.</p>

<p>This program rewrites your code, but using the most complex and ineficient ways of doing things. I don&#39;t really see why anyone will need this, but it is cool nonetheless.</p>

<p>Okay, let&#39;s get started by making the conditions unnecessarily complex!</p>

<h3><u>Booleans</u></h3>

<p>Whenever you do a condition, the condition always has to be a boolean.
In while loops, if statements, etc.
Say, for example, you have a condition <code>no != 10</code>. You might be using it in a while loop, for example:
<pre>
int no = 0;
while(no != 10)
{
    no++;
}
</pre></p>

<p>Since the condition is a boolean, you can easily add <code>== true</code> to the end without it affecting the code. After all, the condition is just the short-hand way of writing that.
<pre>
int no = 0;
while(no != 10 == true)
{
    no++;
}
</pre></p>

<p>Now, there are many ways we could say <code>true</code>. If we felt particularly groovy that day, we could write <code>no != 10 == !false</code> because !false = true.</p>

<p>Heck, we could even write <code>no != 10 != !!false</code>
Or this: <code>no != 10 != !!false != !false != true</code></p>

<p>This is because <code>!false</code>,<code>!= !!false != !false != true</code>,<code>!= !!false</code> are all ways of saying <code>true</code>.
Now let&#39;s make a method that replaces every instance of <code>true</code> in the statement with one of these more complex ways of expressing <code>true</code>.
Like I mentioned earlier, we can always add <code>== true</code> to any condition without making a difference. Even if the condition already has <code>== true</code> at the end:</p>

<p><code>true == true == true</code> = <code>true == true</code> = <code>true</code>.</p>

<p>So you don&#39;t need to worry about a condition without an instance of <code>true</code> in it, we can just add one right at the start.</p>

<p>Ok, great, our method has made the condition slightly more complex. Now how about putting <em>that</em> condition through the algorithm again. It will be even more complex!</p>

<p>Since my method replaces EVERY instance of <code>true</code> found with a random way of expressing <code>true</code>, the complexity will actually increase exponentially.</p>

<p>Here&#39;s the method:
<pre>public string complexifyCondition(string cond, int times)
        {
            Console.Write(&quot;complexifying...&quot;);
            string[] trues = new string[] { &quot;!true == !true&quot;, &quot;true != !true&quot;+Environment.NewLine, &quot;!!!true != !!true&quot;, &quot;!false != !true&quot;+Environment.NewLine, &quot;!!false != true != !false == !true&quot;
            ,&quot;!!!false == !!true&quot;};
            string ret = cond+&quot; == true&quot;;
            int no = times;
            while (no != 0)
            {
                var regex = new Regex(Regex.Escape(&quot;true&quot;));
                int na = Regex.Matches(ret, &quot;true&quot;).Count;
                while (na != 0)
                {
                    var newText = regex.Replace(ret, trues[r.Next(trues.Length)], 1);
                    ret = newText;
                    na--;
                    // Console.Write(&quot;.&quot;);
                }
                //Console.ForegroundColor = ConsoleColor.Red;
                //Console.Write(&quot;.&quot;);
                //Console.ResetColor();
                no--;
            }
            System.Windows.Forms.Clipboard.SetText(ret);
            return ret;
        }</pre></p>

<p>Let&#39;s give it a spin!
Let&#39;s input our example condition <code>no != 10</code>:
<table><tbody>
<tr><th>Times</th><th>Output</th></tr>
<tr><td>0</td><td>no != 10 == true</td></tr>
<tr><td>1</td><td>no != 10 == !!!true != !!true</td></tr>
<tr><td>2</td><td>no != 10 == !false != !!!!false == !!true</td></tr>
<tr><td>3</td><td>no != 10 == !!!!!false != !!!false == !!!!false != !!!false == !!!!false != true != !false == !true != !false == !true
!= !false == !true != !!true</td></tr>
<tr><td>4</td><td>no != 10 == !!false != !!!false != !false != !!!!false == !!!!!!!!false == !!!!!false == !!!!false != true != !false == !true != !!true != !true!= !true!= !false == !true== !true</td></tr>
</tbody>
</table>
etc...
<a href="http://pastebin.com/zrQj6KBu">Here</a> is the output when the complexity is set to 19.
I probably won&#39;t be able to run it on my secondary computer (because it is slow), but, theoretically if you replace <code>no != 10</code> at the start with <code>bool b =</code>,
the value of the boolean should be <code>True</code>!</p>

<p>See, this is why </p>

<blockquote>
<p>Oh i&#39;ve written 5000 lines of code broo!</p>
</blockquote>

<p>means very little to me. To all those who have ever said that, I say: </p>

<blockquote>
<p>Oh i&#39;ve written 7,264 lines of code in like 10 seconds broo!</p>
</blockquote>

<p>7,264 lines of code for only a simple boolean &quot;true&quot;. How&#39;s that for complex booleans?
And the complexity was only set to 19... </p>

<p>I wouldn&#39;t recommend going above 10, however. Your computer might have a hard time generating the condition. When I pasted that code into Visual Studio, it insta-crashed on this pc <strong>x_x</strong></p>

<h3><u>What my initial intentions were</u></h3>

<p>I initially intended to make an algorithm that would do the following:
<pre>
int no = 0;
while(no != 10)
{
    no++;
}</p>

<h2></pre></h2>

<p>Converted to:
<pre>
private int Do(int no){
return no+=1;
}
private bool Check(int no){
return no != 10;
}
int no = 0;
:foo
no = Do(no);
if(!Check(no)){
goto foo;
}
</pre></p>

<p>Notice how the code is now suddenly more complex. Making that code is quite complex, though, because you will need to work out which variables to pass etc etc. I somehow started experimenting with bools and now this happened.
I also made a method to actually parse the condition from a loop/statement:
<pre>public string GetBoolfloop(string lname, params string[]raw)
        {
            foreach (var loc in raw)
            {
                if (loc.Contains(lname))
                {
                    //Console.WriteLine(&quot;located loop def :&quot; + loc);
                    string only = loc.Substring(loc.IndexOf(lname));
                   // Console.WriteLine(&quot;isolated: &quot;+only);
                    string boolarg = &quot;&quot;;
                    bool started = false;
                    foreach (var s in only)
                    {
                        if (s == &#39;)&#39;) started = false;
                        if (started)
                        {
                            boolarg += s;
                        }
                        if (s == &#39;(&#39;) started = true;
                    }
                 //   Console.WriteLine(&quot;isolated boolarg: &quot; + boolarg);
                    return boolarg;
                }
            }
            return &quot;&quot;;
        }</pre>
And a method to get the code within the loop/statement:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="kt">string</span> <span class="nf">GetCodefbrackets</span><span class="p">(</span><span class="kt">string</span> <span class="n">sbracket</span><span class="p">,</span><span class="kt">string</span> <span class="n">ebracket</span><span class="p">,</span> <span class="k">params</span> <span class="kt">string</span><span class="p">[]</span> <span class="n">code</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">string</span> <span class="n">ret</span> <span class="p">=</span> <span class="s">""</span><span class="p">;</span>
            <span class="kt">bool</span> <span class="n">started</span> <span class="p">=</span> <span class="k">false</span><span class="p">;</span>
            <span class="k">foreach</span> <span class="p">(</span><span class="n">var</span> <span class="n">loc</span> <span class="k">in</span> <span class="n">code</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">loc</span><span class="p">.</span><span class="nf">Contains</span><span class="p">(</span><span class="n">ebracket</span><span class="p">))</span>
                <span class="p">{</span>
                    <span class="n">started</span> <span class="p">=</span> <span class="k">false</span><span class="p">;</span>
                    <span class="n">ret</span> <span class="p">+=</span> <span class="n">Environment</span><span class="p">.</span><span class="n">NewLine</span><span class="p">+</span><span class="n">loc</span><span class="p">.</span><span class="nf">Replace</span><span class="p">(</span><span class="n">ebracket</span><span class="p">,</span> <span class="s">""</span><span class="p">);</span>
                    <span class="k">continue</span><span class="p">;</span>
                <span class="p">}</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">started</span><span class="p">)</span>
                <span class="p">{</span>
                    <span class="n">ret</span> <span class="p">+=</span> <span class="n">Environment</span><span class="p">.</span><span class="n">NewLine</span> <span class="p">+</span> <span class="n">loc</span><span class="p">;</span>
                <span class="p">}</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">loc</span><span class="p">.</span><span class="nf">Contains</span><span class="p">(</span><span class="n">sbracket</span><span class="p">))</span>
                <span class="p">{</span>
                    <span class="n">started</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span>
                    <span class="n">ret</span> <span class="p">+=</span> <span class="n">loc</span><span class="p">.</span><span class="nf">Substring</span><span class="p">(</span><span class="n">loc</span><span class="p">.</span><span class="nf">IndexOf</span><span class="p">(</span><span class="n">sbracket</span><span class="p">)+</span><span class="m">1</span><span class="p">);</span>
                 <span class="c1">//   Console.WriteLine(ret);
</span>                <span class="p">}</span>
            <span class="p">}</span>
            <span class="c1">//Console.WriteLine(ret);
</span>            <span class="k">return</span> <span class="n">ret</span><span class="p">;</span>
        <span class="p">}</span></code></pre></figure>

<hr>

<!-- footer -->

<p>Time taken to write: An hour and a bit</p>

<hr>

<!-- Ack -->

<p><small><small><small><a href="http://commons.wikimedia.org/wiki/File:Monotone_Boolean_functions.svg">Cover Image</a> by <a href="https://commons.wikimedia.org/wiki/User:David_Eppstein/Gallery">David Eppstein</a>. It has not been edited.</small></small></small></p>

	  ]]></description>
	</item>

	<item>
	  <title>Universal Program - Briefing</title>
	  <link>/UniversalProgramBriefing</link>
	  <author>PixelZerg</author>
	  <pubDate>2015-11-22T03:17:29+00:00</pubDate>
	  <guid>/UniversalProgramBriefing</guid>
	  <description><![CDATA[
	     <p>Here&#39;s a cool project i&#39;m starting. The aim is to port a single program into every coding language that I know. This is basically to familiarize myself with coding languages that I haven&#39;t done in a long time. I might even learn new coding languages just for this project. This is going to be great! But first, we must decide what the program must actually be.</p>

<h3><u>Stuff That Must be Included</u></h3>

<h5>Menu</h5>

<p>The program must contain a menu of some description with a list to select stuff included in the program. The user must be able to interact with the list and select items.
<ul><li>Orginisation</li><li>User Input</li><li>Printing</li><li>Basic Stuff</li></ul></p>

<hr>

<h5>Loading</h5>

<p>The program must display a loading animation. The loading percentage is also included in the console window&#39;s title.
<ul><li>Sleeping the Thread</li><li>Displaying Animation</li><li>Basic Text Stuff</li><li>Changing title</li></ul></p>

<hr>

<h5>Hangman</h5>

<p>There is a VERY BASIC hangman game included.
<ul><li>List/Array stuff<br><ul><li>Check if List Contains Item</li><li>Make a list</li></ul></li>
<li>Looks cool</li><li>Escaping text</li></ul></p>

<hr>

<h5>Higher or Lower Game</h5>

<p>A simple game. A random number is selected and the user must try to guess it. The program tells the user if they got the number right or it will tell them if the number they guessed was too high or too low.
<ul><li>Number Stuff</li><li>Checking if a number is greater than another number</li><li>parsing string into integer</li></ul></p>

<hr>

<h5>Rectangle Drawer</h5>

<p>The user will input X, Y co-ordinates and also Width and Height. The program will draw a rectangle.
<ul><li>graphics stuff</li><li>Getting User Input</li><li>While loops</li></ul></p>

<hr>

<h5>Libs</h5>

<p>The program asks the user for some words by their type (verb, adjective, noun, etc) and will then incorporate them into a story. This usually makes funny results. You can also save the generated story as a .txt file or other formats.
<ul><li>writing to a file</li><li>basic variable usage</li></ul></p>

<hr>

<h3>NB</h3>

<p>Note that not all of these features will be able to be implemented due to restrictions of the coding language itself and other restrictions. You may notice that the functionality of certain features vary in different coding languages due to said restrictions.</p>

<hr>

<!-- footer -->

<p>Time taken to write: 30 or so min.</p>

<hr>

<!-- Ack -->

<p><small><small><small><a href="https://www.flickr.com/photos/wneuheisel/5256103622">Cover Image</a> by William Neuheisel. It has not been edited.</small></small></small></p>

	  ]]></description>
	</item>

	<item>
	  <title>Batch to C# - Info</title>
	  <link>/Batch2Csharp</link>
	  <author>PixelZerg</author>
	  <pubDate>2015-10-29T03:50:29+00:00</pubDate>
	  <guid>/Batch2Csharp</guid>
	  <description><![CDATA[
	     <p>My first ever coding language was BATCH. Yes, the coding language for MS-DOS. I used it to make some really interesting things!</p>

<p>I once found myself browsing through the archives of my old computer and found some of my old BATCH files. The finding inspired me to make this program, a BATCH to C# converter.</p>

<p>I remember thinking to myself, you can pretty much do everything in BATCH with C#. Let&#39;s find out if I was right!</p>

<p>The program is written in a way such that the code can be translated into any other coding language, as long as there is a specific compiler for it. (modular format)</p>

<p>There is a central &quot;coding language&quot;, which basically contains all of the data you will need to do the conversion. Visibility of classes, code&#39;s function(to print text/pause/get user input/etc), methodnames, etc.</p>

<p>This batch to C# converter, however, is direct because I made the scripts for it before thinking of making the program modular.</p>

<hr>

<h3><u>Screenshots</u></h3>

<p>Here&#39;s what the UI looks like:
<img src="/assets/poststuff/1/1.jpg" alt="UI">
The comboboxes at the top are currently empty because the program isn&#39;t FULLY modular. Wouldn&#39;t be that hard to complete the modular system, though.</p>

<p>Let&#39;s run the code. Try and spot the difference between the C# output and BATCH outputt:
<img src="/assets/poststuff/1/2.jpg" alt="BATCH">
<img src="/assets/poststuff/1/3.jpg" alt="C#"></p>

<p>The first one is BATCH, the second one is C#.</p>

<p>You may have noticed, you can compile the C# script right from within the program. This is using the csc.exe file. You will be asked to navigate to it. It is usually in <pre>(drive [normally &quot;c&quot;]):\windows\Microsoft.NET\Framework\v(version)\csc.exe</pre>
This is, providing you have .net framework installed.</p>

<hr>

<h3><u>Batch's "method" execution system.</u></h3>

<p>Batch&#39;s methods are executed in a much more different way to C#&#39;s.
For example:
<pre>@echo off
echo foooo:
:foo
    echo Hello
    goto loo
:joo
    echo joo
:loo
    echo World
:noo
    echo !!!!!
    pause</pre>
Will have the output:
<pre>foooo:
Hello
World
!!!!!
Press any key to continue . . .</pre></p>

<p>Notice how the &quot;loo&quot; method goes directly to &quot;noo&quot; once it has finished executing.
Notice how the &quot;goto&quot; to &quot;loo&quot; doesn&#39;t return, rather it continues on to &quot;noo&quot;.</p>

<p>Let&#39;s imagine that the &quot;:&quot; defines a method. A port of the above code, in C# will look like:
<pre>
using System;</p>

<p>public class Program
{
    public static void Main()
    {Console.WriteLine(@&quot;foooo:&quot;);}
    public static void foo()
    {
        Console.WriteLine(&quot;Hello&quot;);
    }
    public static void joo()
    {
        Console.WriteLine(@&quot;joo&quot;);
    }
    public static void loo()
    {
        Console.WriteLine(@&quot;World&quot;);
    }
    public static void noo()
    {
        Console.WriteLine(@&quot;!!!!!&quot;);
        Console.WriteLine(&quot;Press any key to continue...&quot;); Console.ReadKey();
    }
}
</pre></p>

<p>The execution order here is definitely not the same. Here&#39;s the output:
<pre>foooo:</pre></p>

<hr>

<h3><u>Simulating this Execution Order in C#</u></h3>

<p>This is quite easy, all you have to do is make a list of all of the methods that you have in the batch script, in the order that they appear.</p>

<p>Then, when converting to C#, add a little line of code at the end which calls the next method. If there isnt a &quot;next method&quot;, then you know it must be the exit point of the application.</p>

<p>Here&#39;s what the compiler gives as output now:</p>

<figure class="highlight"><pre><code class="language-batch" data-lang="batch">using System;

public class Program
{
    public static void Main()
    {
        Console.Clear(); //required line of code
        //echo is off from this point onwards!
        Console.WriteLine(@"foooo:");
            foo(); //proceed to next method
    }
    public static void foo()
    {
        Console.WriteLine(@"Hello");
        loo();
    }
    public static void joo()
    {
        Console.WriteLine(@"joo");
            loo(); //proceed to next method
    }
    public static void loo()
    {
        Console.WriteLine(@"World");
            noo(); //proceed to next method
    }
    public static void noo()
    {
        Console.WriteLine(@"!!!!!");
        Console.WriteLine("Press any key to continue..."); Console.ReadKey();
        Environment.Exit(0); //end of program
    }
}</code></pre></figure>

<hr>

<h3><u>Individual Line Handling</u></h3>

<h5>Console Output</h5>

<p>This is probably harder than what you might have expected at first.
<code>@echo foo</code> -&gt; <code>Console.WriteLine(&quot;foo&quot;);</code>
Simple as that!... right?</p>

<p>nope, we need to consider <var>all</var> of the scenarios. Here&#39;s what would currently happen in some scenarios:
<table><tbody>
<tr><th>Batch</th><th>C#</th><th>Output Batch</th><th>Output C#</th></tr>
<tr><td><code>@echo &quot;hello&quot;</code></td><td><code>Console.WriteLine(&quot;&quot;hello&quot;&quot;);</code></td><td>&quot;hello&quot;</td><td>Does Not Compile</td></tr>
<tr><td><code>@echo %moo%</code></td><td><code>Console.WriteLine(&quot;%moo%&quot;);</code></td><td>vardata</td><td>%moo%</td></tr>
</tbody></table></p>

<p>The first issue is quite easy to solve, you just have to turn the string into a literal string <strong>or</strong> you can add the correct escape sequence.</p>

<p>The second issue will need some parsing.
Let&#39;s look at it again:
<code>@echo %moo%</code>
<ol>
<li>Get the position of the first &quot;%&quot;, done using string.instanceOf();</li>
<li>Get the position of the second &quot;%&quot;, done by converting string into char array and cycling through</li>
<li>Get the variable name by using substring.</li>
</ol></p>

<p>And now that you have the variable name, in the C# version you must remember to:
<ol>
<li>Add an ending quotation mark</li>
<li>Add a plus symbol</li>
<li>Add the variable name</li>
<li>Add another plus symbol</li>
<li>Add the literal string identifier &quot;@&quot;</li>
<li>Add a starting quotation mark</li>
</ol>
That&#39;s one way of doing it.
Another way of doing it, and perhaps a more efficient way of doing it is that you just replace the two &quot;%&quot; symbols with a quotation mark and a plus or a plus then a quotation mark respectively.</p>

<p>So now the C# version is:
<code>Console.WriteLine(@&quot;&quot;+moo+@&quot;&quot;);</code></p>

<p>Great, it&#39;s done!
Nope... we still have not done every scenario.</p>

<p>What would happen in this scenario:</p>

<p><code>@echo var</code> -&gt; <code>Console.WriteLine(@&quot;&quot;+var+@&quot;&quot;);</code></p>

<p>Most of you can probably immediately see that this is wrong.
&quot;var&quot; can&#39;t be set as a variable name in C# because the compiler will think your using it as a type.</p>

<p>Solution?
All variables that are defined or called must have a &quot;@&quot; symbol in front of them.</p>

<p>Now the C# version is:
<code>Console.WriteLine(@&quot;&quot;+@moo+@&quot;&quot;);</code>
Great! I&#39;m satisfied!</p>

<h5>Colour</h5>

<p>AKA &quot;color&quot;...
This command in cmd paints the background a specific colour.
The first letter/number corresponds to the foreground, the second corresponds to the background.
Implementing that is not that hard at all. All you really need is a <code>dictionary</code> with <code>keys</code> of the letters and <code>values</code> of <code>consolecolor</code> values.</p>

<p>Then you could just simply do <code>Console.ForegroundColour = dictionary[string[0]];Console.BackgroundColour = dictionary[string[1]];</code></p>

<p>Notice anything missing?
When the color command is called in cmd, the console&#39;s entire background/foreground gets repainted as that colour.
Let&#39;s implement that then!</p>

<p>Here&#39;s what the program outputs when <code>@color AE</code> is inputted:
<pre>using System;</p>

<p>public class Program
{
    public static void Main()
    {
        Console.BackgroundColor = ConsoleColor.Green;</p>
<div class="highlight"><pre><code class="language-" data-lang="">        int KXLXFHICTGUWIDTQQGWJJ = 0;int RVBABPYMZLKWVTNYAFGQPFE = Console.CursorLeft;int ODYYECCLDAQMQOVPMXFJKY = Console.CursorTop;while (KXLXFHICTGUWIDTQQGWJJ != Console.WindowHeight)
        {int KROYBEJQZZQLDWEBMNRA = 0;while (KROYBEJQZZQLDWEBMNRA != Console.WindowWidth){Console.Write(" ");KROYBEJQZZQLDWEBMNRA++;}KXLXFHICTGUWIDTQQGWJJ++;}Console.SetCursorPosition(RVBABPYMZLKWVTNYAFGQPFE, ODYYECCLDAQMQOVPMXFJKY);
</code></pre></div>
<p>Console.ForegroundColor = ConsoleColor.Yellow;
        Environment.Exit(0); //end of program
    }
}</pre></p>

<p>It&#39;s just a basic implementation of repainting the console background by filling it in with empty space.
The variable names that are required to do this are randomly generated.</p>

<p>There is one problem with this, however, any text that was on the screen before is going to be shifted up and off the console window.
There is a way to fix this, by repainting all the text on too, by storing all the text in a string builder and then setting console&#39;s cursor position to the top left corner of the console, then re-printing the words and then setting the cursor position back to normal.
This project, at the time of writing, has been deprecated long ago so I haven&#39;t implemented that.</p>

<p>This will do for now!</p>

<h5>pause</h5>

<p>The program converts the pause command to:
<code>Console.WriteLine(&quot;Press any key to continue...&quot;); Console.ReadKey();</code>
Pretty self-explanatory...</p>

<h5>ECHO</h5>

<p>In batch, when you run a command, the command is echoed in the console and then executed:</p>

<p><code>Console.WriteLine(System.Environment.CurrentDirectory+&quot;&gt;SET /p var=&quot;); //echo is on so printing command</code></p>

<p>This has been simulated in this program. The program also recognises <code>@echo off</code> and <code>@echo on</code> commands.
The program will not print the command if <code>echo</code> is off or if the line of code has a &quot;@&quot; before it (just like batch).</p>

<p>My aim is for the output to look exactly the same for both scripts. It wouldn&#39;t really look the same if the <code>echo</code> features were not implemented.</p>

<p>The only thing that makes it look slightly different is the thing with the color command.</p>

<h5>Variable Setting</h5>

<p>This is pretty self-explanatory:
<table>
<tbody>
<tr><th>Batch</th><th>C#</th></tr>
<tr><td><code>SET /p var=</code></td><td><code>var @var = Console.ReadLine();</code></td></tr>
</tbody>
</table></p>

<p><strong>There is no arithmetic support! :(</strong></p>

<h5>Title</h5>

<p>This is rather straight forward.
<code>@title banana</code> -&gt; <code>Console.Title = @&quot;banana&quot;;</code></p>

<hr>

<h6>Many batch features are supported. Many were probably not even mentioned here. At the end of the day, this is just proof of concept! Give the program a go if you want. The source is also available.</h6>

<hr>

<!-- footer -->

<p>Time taken to write: 4-5h</p>

<hr>

<!-- Ack -->

<p><small><small><small><a href="https://en.wikipedia.org/wiki/Colossal_Cave_Adventure#/media/File:Colossal_Cave_Adventure_on_VT100_terminal.jpg">Cover Image</a> by Autopilot. Has not been edited.</small></small></small></p>

	  ]]></description>
	</item>


</channel>
</rss>
