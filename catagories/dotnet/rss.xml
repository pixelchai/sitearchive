<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>pixelzerg.github.io</title>
   
   <link>http://pixelzerg.github.io/</link>
   <description>A website of games, code, how tos, language, music, 3D modeling and animating, general art, literature, etc. Anything that I, and hopefully you, find interesting.</description>
   <language>en-uk</language>
   <managingEditor> PixelZerg</managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>Focus</title>
	  <link>/Focus</link>
	  <author>PixelZerg</author>
	  <pubDate>2015-12-08T08:23:01+00:00</pubDate>
	  <guid>/Focus</guid>
	  <description><![CDATA[
	     <p>So many projects yet so little time.</p>

<p>Ok, so the amount of projects I am simultaneously doing is getting quite crazy now:
<ol>
<li>Universal Program</li>
<li>MATH calculator</li>
<li>Jeff2</li>
<li>Code Complexifier</li>
<li>AS Computing Exercises</li>
<li>PixelOS</li>
<li>Various stuff on this website (parallax, syntax highlighting, css, etc)</li>
</ol>
(These are the projects that I have worked on for &gt;5 hours in the past few days - so not including stuff like Dungeon Notif, VTPX, Poem Editor, Batch to C#, etc, etc)</p>

<p>School is busy as ever and I really can&#39;t do so many things at once. Let&#39;s choose one program and work on only one.
Rather than leaving them unfinished and moving on to newer projects - let&#39;s see how long I can keep at it and how awesome I can make it.</p>

<h3>Pick a project, any project</h3>

<p>Which one shall we choose?
<h4>Jeff2</h4>
Jeff2 isn&#39;t looking that good at the moment. While it is working great and has great potential and looks good, I think I may have to re-write the file handling system for it some time. For now - <var>ain&#39;t nobody got time for dat</var></p>

<h4>Code Complexifier</h4>

<p>Let&#39;s face it, this project is just a proof of concept and it doesn&#39;t have any real-world uses at all, nobody wan&#39;t their code to be inefficient and if they wanted to make it unreadable and complex, they will most likely are going to use an obfuscator. I probably won&#39;t be working on this project anymore anytime soon...</p>

<h4>AS Computing Exercises</h4>

<p>Doing these exercises aren&#39;t really helping me at all. The exercises are plain and far too easy and therefore boring. Even with my attempts to make them more interesting (as you saw in the blog posts for it). We need something more challenging and interesting, I think.</p>

<h4>PixelOS</h4>

<p>This project is quite interesting so far. I might continue working on it every now and again. I&#39;ve only recently started this project, however (it does not even have a blog post so far), and so I don&#39;t really know if I will end up dropping the project. Let&#39;s wait and find out.</p>

<h4>Universal Program. I CHOOSE YOU!</h4>

<p>My projects for the past few years have been strictly in C#. Let&#39;s try something new! That sounds exciting to me! Recently, I&#39;ve started seeing the positives in Python more and more and there are so many programing languages I want to try out. Let&#39;s do this! My initial breifing does, however, seem a bit ambitious. It might need some toning down.</p>

<h5>But at the end of the day,</h5>

<p>Christmas holidays are comming up. So is a lot of more free time! I think I am going to devote that time to the PixelOS, UniversalProgram and website projects. Ok, i&#39;m focused now!</p>

<h3>PS</h3>

<p>I&#39;ve noticed that my posts are very, very long and I seem to like ranting a lot. I&#39;m going to try and write less or at least split my posts into readable chunks from now on. Also, I&#39;m going to try making stuff about not just coding. I am a fan of some good ol&#39; poetry, gaming, art, languages, etc as well you know!</p>

	  ]]></description>
	</item>

	<item>
	  <title>s2.1p36 - Money Algorithm!</title>
	  <link>/AScompexs21p36</link>
	  <author>PixelZerg</author>
	  <pubDate>2015-11-28T15:49:08+00:00</pubDate>
	  <guid>/AScompexs21p36</guid>
	  <description><![CDATA[
	     <p><img src="/assets/poststuff/2/1.PNG" alt=""></p>

<p>This chapter seems to talk about basic stuff like what algorithms are and operators. This reminds me of when I was first scratching the surface of C# 4 years ago. Back then, I was messing around a lot with Unity - the 3D game engine. Unity uses a mono runtime so I was slowly learning C# from my own accord. Little did how know just how extensive and awesome C# was. I remember Unity also had a javascript API called unityscript. I remember I used to use that a lot before learning C#. In fact, I may have never even started using C# if it wasn&#39;t for something that happened out of the blue, I&#39;ll make a post on it later.</p>

<p>Anyway, this chapter is about stuff like operators and printing to the console and whatnot - basic stuff.</p>

<hr>

<h3>Hello World</h3>

<p>The first question makes me display &quot;Hello World&quot; on the screen. That&#39;s how basic this book is :p
If only I read this book 4 years ago... no wait, I take that back. Learning everything by yourself is much better, I think, than having it be told to you. Much more in-depth. The only thing is that it takes a longer time to do.</p>

<p>So as you may already know, here&#39;s how to print to the console:
<pre><code class="hljs csharp">
Console.WriteLine(&quot;Hello World&quot;);
</pre></code></p>

<p>Well, I thought this was a bit boring so let&#39;s give it a cool animation <strong>MULTITHREADING TIME</strong> :)</p>

<p>Ok, so this is pretty easy to do. All you have to do is make a method that will print some dots to the console.
Include a while loop in the method with a <var>counter</var> variable (an integer which shows keeps track of how many times you have looped).
Print <var>counter</var> amount of dots every time you loop.
You might want to also make the thread sleep with <code>System.Threading.Thread.Sleep(x)</code> while you are at it.</p>

<p>You probably don&#39;t want loads of dots filling the console so reset the <var>counter</var> every 3 or so goes.
You can do this with:
<pre><code class="hljs csharp">
if(counter == 3)counter=0;
</pre></code>
or if you are feeling fancy:
<pre><code class="hljs csharp">
if(counter %3 == 0)counter=0;
</pre></code></p>

<p>I was feeling fancy today :p</p>

<p>So here&#39;s the method:
<pre><code class="hljs csharp">
<pre><code class="hljs csharp">
private static void Anim(string txt)
{
     int no = 0; //counter
     while (animrun)
     {
     Console.Clear();
     Console.Write(txt);</p>
<div class="highlight"><pre><code class="language-" data-lang=""> StringBuilder sb = new StringBuilder(); //do the dots
 sb.Append('.', no);
 Console.Write(sb.ToString());

 System.Threading.Thread.Sleep(300); //wait
 if (no % 3 == 0) //if no is fully divisible by 3
 {
    no = 0; //reset
 }
 no++;
}
</code></pre></div>
<p>}
</pre></code>
</pre></code></p>

<p>You use the method like this:
<pre><code class="hljs csharp">System.Threading.Thread t = new System.Threading.Thread(() =&gt; Anim(&quot;Hello World&quot;));
t.Start();//print hello world (q1)
Console.ReadKey(); animrun = false; //after pressed a key, halt anim thread
Console.Write(Environment.NewLine); //print line ending (add new line)
t.Suspend(); //suspend animation thread
Console.Clear();</pre></code></p>

<p>Output:
<img src="https://i.gyazo.com/ce2341c37c46493c5d7ac2d3895c8fe2.gif" alt="Fancy Hello World"></p>

<hr>

<h3>Displaying two messages</h3>

<p>Ok so the next exercise is to:</p>

<blockquote>
<p>Display two messages of your choice on the screen, seperated by an empty line</p>
</blockquote>

<p>You know, if I was actually learning C# for the first time whilst reading this book, I bet you I would have done my own message for exercise 1 because <em>imma rebel</em>. Probably something like <code>Hello World - PixelZerg is awesome</code> or like <code>Hello World - If you don&#39;t eat food you will die</code>.</p>

<p>But this question allows you to do just that. This is simple enough, using the method we previously made, we can easily complete the exercise by doing:
<pre><code class="hljs csharp">animrun = true;
t = new System.Threading.Thread(() =&gt; Anim(&quot;Do you like food?&quot; + 
Environment.NewLine + Environment.NewLine + &quot;I like food&quot;)); t.Start();
Console.ReadKey(); animrun = false; t.Suspend();
Console.Clear();</pre></code></p>

<p>Output:
<img src="https://i.gyazo.com/803f07d64c61a05587d9b92afc405a69.gif" alt=""></p>

<hr>

<h3>Average Algorithm</h3>

<blockquote>
<p>Display the sum and average of three numbers entered at the keyboard.</p>
</blockquote>

<p>hmm... that question doesn&#39;t seem to be in English. Let&#39;s translate it:</p>

<blockquote>
<p>Display the sum and average of three numbers entered with the keyboard.</p>
</blockquote>

<p>Oh ok, that makes more sense. jk...</p>

<p>The chapter had an example for an algorithm that found the average of two numbers. I am not satisfied with the algorithm at all.
It...
<ul>
<li>defines variables at the start for no reason - they are never used anywhere else</li>
<li>supports only 2 numbers</li>
<li>is very manual and not flexible</li>
<li>uses <pre><code class="hljs csharp">System.Convert.ToDouble()</pre></code> rather than a cast or a conversion like  <pre><code class="hljs csharp">Double.Parse()</pre></code> and uses up space for no reason</li>
<li>is doing everything right in the Main method</li>
<li>has <pre><code class="hljs csharp">string[] args</pre></code> as a parameter for the Main method but not actually using it</li>
<li>is declared that it is using certain namespaces but they aren&#39;t used in the code at all</li>
<li>is not surrounded with try/catch</li>
</ul></p>

<p>Here&#39;s me replicating the code <strong>in one line of code</strong>:
<pre><code class="hljs csharp">Console.WriteLine(&quot;Average = &quot;+(double.Parse(Console.ReadLine()) + double.Parse(Console.ReadLine())) / 2);</pre></code>
Boom!</p>

<p>But anyway, like I said, the code in the book isn&#39;t very flexible at all. The question says to make a program that displays the sum and average of 3 numbers, but <em>imma rebel</em> so let&#39;s make it so that our method can do an unlimited amount of numbers.
<pre><code class="hljs csharp">private static decimal GetAverage(params decimal[] numbers)
        {
            decimal sum = 0;
            foreach (decimal number in numbers)
            {
                sum += number; //find sum
            }
            return sum / numbers.Length; //divide sum by no of numbers
        }</pre></code></p>

<p>There&#39;s the method I made. That&#39;s all there is to it! Funny thing is, this method is still way shorter than the algorithm in the book.
I suppose the algorithm is good for complete beginners at C# but c&#39;mon dude...</p>

<p>So, as you can see, in my method, I use an array then find the sum of that array then find the sum of the numbers in the array then divide it by the amount of items in the array (which is how you find averages). Awesome right?</p>

<p>Nope! That was a trick question, it&#39;s not awesome! You can reduce that method down to <strong>one</strong> line of code:
<pre><code class="hljs csharp">private static decimal GetAverage(params decimal[] numbers){
return numbers.Sum() / numbers.Length;
}</pre></code></p>

<p>(and yes, that <em>is</em> one line of code because you can do this: <code>private static decimal GetAverage(params decimal[] numbers){return numbers.Sum() / numbers.Length;}</code>)</p>

<p>You can probably imagine just how bad the code in the book was now. You don&#39;t really need me to show you the code...</p>

<p>Anyway, let&#39;s try not to get <em>too</em> heated over the example and continue.
Here&#39;s how you use my method:
<pre><code class="hljs csharp">
Console.WriteLine(&quot;Enter some numbers to find the average&quot;);
List<decimal> numbers = new List<decimal>();
bool done = false;
while (!done)
{
  numbers.Add(ReadDecimal(&quot;Enter a number&quot;));
  Console.WriteLine(&quot;Add more numbers? (y/n)&quot;);
  done = Console.ReadKey().Key != ConsoleKey.Y;
}
Console.Clear();
Console.WriteLine(&quot;The average of those numbers is: &quot; +
GetAverage(numbers.ToArray()) + &quot; and the sum is &quot; +
numbers.Sum());
Console.ReadKey();
Console.Clear();</pre></code></p>

<p>Output:
<img src="https://i.gyazo.com/7316b0a74eb135a094d2ab92101e81c6.gif" alt=""></p>

<hr>

<h3>Modulo Operator</h3>

<blockquote>
<p>Read in two integers and display how many times the first integer divides into the second integer (using integer division). Display the remainder from this division. Hint: use the modulo operation.</p>
</blockquote>

<p>This exercise is very basic and I couldn&#39;t find a way of making it more interesting like I did with exercise 1 so I guess i&#39;ll just do it:
<pre><code class="hljs csharp">int num1 = ReadInt(&quot;Enter x where x/y=output&quot;);
int num2 = ReadInt(&quot;Enter y where x/y=ouput&quot;);
Console.WriteLine(&quot;output = &quot; + num1 / num2 + &quot; remainder &quot; + num1 % num2 
+ Environment.NewLine + &quot;i.e: &quot; + num1 / num2 + &quot; &quot; + num2 + &quot;s go into &quot; 
+ num1 + &quot; with a remainder of &quot; + num1 % num2);
Console.ReadKey();//wait for keycodess
Console.Clear();</pre></code></p>

<p>Oh yeah, I forgot to mention, I also made a method <code>ReadInt()</code> that gets input from the console, but only integers. It has cool features e.g it doesn&#39;t allow you to type any non-numeric characters or go over the maximum value that an integer can store. Here it is (the indentation weird because I want it to fit on the screen):
<pre><code class="hljs csharp">private static int ReadInt(string prompt)
{
Console.Clear();
Console.WriteLine(prompt);
string rawin = string.Empty;
int integer = 0;
Regex numpattern = new Regex(&quot;^[0-9]*$&quot;);
bool done = false;
while (!done)
{
 ConsoleKeyInfo k = Console.ReadKey(); //read a key
 if (k.Key == ConsoleKey.Enter) //enter means done
 {
  done = true;
 }
 if (k.Key == ConsoleKey.Backspace)
 {
  try
  {
   rawin = rawin.Substring(0, rawin.Length - 1);
  }
 catch { }
 }
{
 if (numpattern.IsMatch(k.KeyChar.ToString()))
 {
  if (Int32.TryParse(rawin + k.KeyChar, out integer))
  {
   rawin += k.KeyChar;
  }
 }
}
Console.Clear();
Console.WriteLine(prompt);
Console.WriteLine(rawin);
}
return integer;
}</pre></code></p>

<p>Output:
<img src="https://i.gyazo.com/e4a868c1a8ea98f39855729d5494b918.gif" alt=""></p>

<hr>

<h3>Money Algorithm</h3>

<blockquote>
<p>The user enters an amount of money as a whole number. The program should calculate and display how many £20, £10 and £5 and £2 and £1 coins are needed to make up this amount of money.</p>
</blockquote>

<p>Making this method was the most interesting of all of the methods so far. But this is only because again, me being such a <em>rebel</em> I decided to allow the user to input not whole numbers, i.e pennies are supported to.</p>

<p>First of all, I made this primitive algorithm for working out which different coins/notes to use to make up the inputed value. (If you look on github, I have commented all of the code in this post)
<pre><code class="hljs csharp">private static void MoneyAlgorithm(decimal money)
{
money = Math.Round(money, 2);
decimal[] coinvalues = new decimal[] 
{ 20m, 10m, 5m, 2m, 1m, 0.5m, 0.2m, 0.1m, 0.05m, 0.02m, 0.01m };
decimal curval = money;
while (curval &gt; 0)
{
bool found = false;
for (int no = 0; no != coinvalues.Length; no++)
{
if ((curval - coinvalues[no]) &gt;= 0 &amp;&amp; !found)
{
curval -= coinvalues[no];
if (coinvalues[no] &lt; 1)
{
Console.WriteLine(Math.Truncate(coinvalues[no] * 100) + &quot;p coin&quot;);
}
else
{
Console.Write(&quot;£&quot; + coinvalues[no]);
if (coinvalues[no] == 2m || coinvalues[no] == 1m)
{
Console.Write(&quot; coin&quot;);
}
else
{
Console.Write(&quot; note&quot;);
}
Console.Write(Environment.NewLine);
}
found = true;
}
}
}
}</pre></code></p>

<p>Now, we need to find how many £20, £10, etc do you need to make the given value.
This is easy, you just need to convert the value and everything to integers and then finding the answer using integer division and modulo. Converting directly to integer is lossy in this case so I first multiply the numbers by 100 (to retain 2 decimal points).</p>

<p>Once I had the integer division value, I just input the remainder into the MoneyAlgorithm. Simple as this:
<pre><code class="hljs csharp">private static void MoneyAlgorithm(decimal money, decimal val, string valname)
{
 Console.Clear();
 int times = (int)Math.Truncate(money * 100) / (int)Math.Truncate(val * 100);
 decimal rem = money % val;//find remainder
 Console.WriteLine(times + &quot; &quot; + valname + Environment.NewLine 
+ &quot;Plus an aditional &quot;+rem+&quot; which is made with:&quot;);
 MoneyAlgorithm(rem);
}</pre></code></p>

<p>Here&#39;s how to use the methods:
<pre><code class="hljs csharp">
decimal money = ReadDecimal(&quot;Enter an amount of money. e.g 5.37 = five pounds and thrity seven pence&quot;);
Console.Clear();
Console.WriteLine(&quot;Make that value with:&quot;);
string[] written = new string[] { &quot;Most Efficient Combination&quot;, &quot;1p coin(s)&quot;
,&quot;2p coin(s)&quot;, &quot;5p coin(s)&quot;, &quot;10p coin(s)&quot;, &quot;20p coin(s)&quot;, &quot;50p coin(s)&quot;, &quot;£1 coin(s)&quot;
,&quot;£2 coin(s)&quot;, &quot;£5 note(s)&quot;, &quot;£10 note(s)&quot;, &quot;£20 note(s)&quot; };
switch (MenuChoose(written))
{
case 0:
Console.Clear();
Console.WriteLine(&quot;How to make £&quot; + money + &quot; with conventional brittish money:&quot;);
MoneyAlgorithm(money);
break;
case 1:
MoneyAlgorithm(money, 0.01m, written[1]);
break;
case 2:
MoneyAlgorithm(money, 0.02m, written[2]);
break;
case 3:
MoneyAlgorithm(money, 0.05m, written[3]);
break;
case 4:
MoneyAlgorithm(money, 0.1m, written[4]);
break;
case 5:
MoneyAlgorithm(money, 0.2m, written[5]);
break;
case 6:
MoneyAlgorithm(money, 0.5m, written[6]);
break;
case 7:
MoneyAlgorithm(money, 1m, written[7]);
break;
case 8:
MoneyAlgorithm(money, 2, written[8]);
break;
case 9:
MoneyAlgorithm(money, 5, written[9]);
break;
case 10:
MoneyAlgorithm(money, 10, written[10]);
break;
case 11:
MoneyAlgorithm(money, 20m, written[11]);
break;
}
Console.ReadKey();
Console.Clear();
</pre></code></p>

<p>As you can see in that code, a method <code>Menu Choose</code> is used. This is a method that was taken from one of my previous projects, actually, - <a href="/tag/UniversalProgram">The Universal Program</a></p>

<p>Output:
<img src="https://i.gyazo.com/68b3a128684587b2ead5b3fef82c907b.gif" alt=""></p>

<p>Look how awesome it looks seeing the algorithm work out how to make up money:
<img src="https://i.gyazo.com/0684b2ec4d5f32e8540ff0b1c38da931.gif" alt=""></p>

<hr>

<!-- footer -->

<p>Time taken to write: 2 or so hr.</p>

<hr>

<!-- Ack -->

<p><small><small><small><a href="https://www.flickr.com/photos/wneuheisel/5256103622">Cover Image</a> by William Neuheisel. It has not been edited.</small></small></small></p>

	  ]]></description>
	</item>

	<item>
	  <title>ASComputingExercises - Introduction</title>
	  <link>/ASComputingExercises</link>
	  <author>PixelZerg</author>
	  <pubDate>2015-11-28T12:05:47+00:00</pubDate>
	  <guid>/ASComputingExercises</guid>
	  <description><![CDATA[
	     <p>So here&#39;s an explanation of what these posts are all about and why I made them.</p>

<p>All of posts in this section will be my answers to exercises from a textbook:</p>

<blockquote>
<p>AQA Computing AS level - Kerboodle by Sylvia Langfield and Kevin Bond</p>
</blockquote>

<p>The book, I feel, teaches a much more basic level of computing knowledge than that I already own and the exercises are similar to the stuff I was making nore than 3 years ago, when my computing knowledge was much more limited. Even so, I will work through the book because I have never really looked at coding/computing in an acadamic sense before - I learnt all the knowledge I have about coding today from making random projects and experimenting a lot. I did coding simply because I thought it was very interesting and fun. Another reason for going through this book anyway would be because I was not able to find any higher level books in my school library, from which I got this book.</p>

<p>In all of the exercises that I do complete in this book, I aim to write appropriate comments and give appropriate names to variables. Since I learnt coding just by experimenting, I don&#39;t usually write comments and I often use variablenames that other coders may not understand. I will make it so that the code for these exercises are easily understandable by other coders and I will refrain from using confusing indentations. i.e, no more of this (not that it is in my coding that much anyway):</p>

<pre><code class="hljs csharp">
Console.WriteLine(
new foo((
banana+1)/(
(moo)-(noo)).method(banana,(foo/loo),gaaaaa)
).Get()
)
</code></pre>

<p>In adition, I shall make the programs that I make in this section as efficient as possible, which has never been THAT high of a priority for me (it was prioritised, just not as the <em>highest</em> priority).</p>

<p>NB: The answers to the exercises will be completed in <strong>C#</strong></p>

<hr>

<!-- footer -->

<p>Time taken to write: 30 or so min.</p>

<hr>

<!-- Ack -->

<p><small><small><small><a href="https://www.flickr.com/photos/wneuheisel/5256103622">Cover Image</a> by William Neuheisel. It has not been edited.</small></small></small></p>

	  ]]></description>
	</item>

	<item>
	  <title>CodeComplexifier - Complex Booleans</title>
	  <link>/Cmplxfr1</link>
	  <author>PixelZerg</author>
	  <pubDate>2015-11-24T06:42:45+00:00</pubDate>
	  <guid>/Cmplxfr1</guid>
	  <description><![CDATA[
	     <p>A new project that I am asynchronously starting with my <a href="/tag/UniversalProgram">Universal Program</a> project!
This project is going to, essentially, be a code complexifier. Probably wouldn&#39;t exactly be obfuscation, but it will generate code that will most likely be unreadable to the untrained eye.</p>

<p>This program rewrites your code, but using the most complex and ineficient ways of doing things. I don&#39;t really see why anyone will need this, but it is cool nonetheless.</p>

<p>Okay, let&#39;s get started by making the conditions unnecessarily complex!</p>

<h3><u>Booleans</u></h3>

<p>Whenever you do a condition, the condition always has to be a boolean.
In while loops, if statements, etc.
Say, for example, you have a condition <code>no != 10</code>. You might be using it in a while loop, for example:
<pre><code class="hljs csharp">
int no = 0;
while(no != 10)
{
    no++;
}
</code></pre></p>

<p>Since the condition is a boolean, you can easily add <code>== true</code> to the end without it affecting the code. After all, the condition is just the short-hand way of writing that.
<pre><code class="hljs csharp">
int no = 0;
while(no != 10 == true)
{
    no++;
}
</code></pre></p>

<p>Now, there are many ways we could say <code>true</code>. If we felt particularly groovy that day, we could write <code>no != 10 == !false</code> because !false = true.</p>

<p>Heck, we could even write <code>no != 10 != !!false</code>
Or this: <code>no != 10 != !!false != !false != true</code></p>

<p>This is because <code>!false</code>,<code>!= !!false != !false != true</code>,<code>!= !!false</code> are all ways of saying <code>true</code>.
Now let&#39;s make a method that replaces every instance of <code>true</code> in the statement with one of these more complex ways of expressing <code>true</code>.
Like I mentioned earlier, we can always add <code>== true</code> to any condition without making a difference. Even if the condition already has <code>== true</code> at the end:</p>

<p><code>true == true == true</code> = <code>true == true</code> = <code>true</code>.</p>

<p>So you don&#39;t need to worry about a condition without an instance of <code>true</code> in it, we can just add one right at the start.</p>

<p>Ok, great, our method has made the condition slightly more complex. Now how about putting <em>that</em> condition through the algorithm again. It will be even more complex!</p>

<p>Since my method replaces EVERY instance of <code>true</code> found with a random way of expressing <code>true</code>, the complexity will actually increase exponentially.</p>

<p>Here&#39;s the method:
<pre><code class="hljs csharp">public string complexifyCondition(string cond, int times)
        {
            Console.Write(&quot;complexifying...&quot;);
            string[] trues = new string[] { &quot;!true == !true&quot;, &quot;true != !true&quot;+Environment.NewLine, &quot;!!!true != !!true&quot;, &quot;!false != !true&quot;+Environment.NewLine, &quot;!!false != true != !false == !true&quot;
            ,&quot;!!!false == !!true&quot;};
            string ret = cond+&quot; == true&quot;;
            int no = times;
            while (no != 0)
            {
                var regex = new Regex(Regex.Escape(&quot;true&quot;));
                int na = Regex.Matches(ret, &quot;true&quot;).Count;
                while (na != 0)
                {
                    var newText = regex.Replace(ret, trues[r.Next(trues.Length)], 1);
                    ret = newText;
                    na--;
                    // Console.Write(&quot;.&quot;);
                }
                //Console.ForegroundColor = ConsoleColor.Red;
                //Console.Write(&quot;.&quot;);
                //Console.ResetColor();
                no--;
            }
            System.Windows.Forms.Clipboard.SetText(ret);
            return ret;
        }</code></pre></p>

<p>Let&#39;s give it a spin!
Let&#39;s input our example condition <code>no != 10</code>:
<table><tbody>
<tr><th>Times</th><th>Output</th></tr>
<tr><td>0</td><td>no != 10 == true</td></tr>
<tr><td>1</td><td>no != 10 == !!!true != !!true</td></tr>
<tr><td>2</td><td>no != 10 == !false != !!!!false == !!true</td></tr>
<tr><td>3</td><td>no != 10 == !!!!!false != !!!false == !!!!false != !!!false == !!!!false != true != !false == !true != !false == !true
!= !false == !true != !!true</td></tr>
<tr><td>4</td><td>no != 10 == !!false != !!!false != !false != !!!!false == !!!!!!!!false == !!!!!false == !!!!false != true != !false == !true != !!true != !true!= !true!= !false == !true== !true</td></tr>
</tbody>
</table>
etc...
<a href="http://pastebin.com/zrQj6KBu">Here</a> is the output when the complexity is set to 19.
I probably won&#39;t be able to run it on my secondary computer (because it is slow), but, theoretically if you replace <code>no != 10</code> at the start with <code>bool b =</code>,
the value of the boolean should be <code>True</code>!</p>

<p>See, this is why </p>

<blockquote>
<p>Oh i&#39;ve written 5000 lines of code broo!</p>
</blockquote>

<p>means very little to me. To all those who have ever said that, I say: </p>

<blockquote>
<p>Oh i&#39;ve written 7,264 lines of code in like 10 seconds broo!</p>
</blockquote>

<p>7,264 lines of code for only a simple boolean &quot;true&quot;. How&#39;s that for complex booleans?
And the complexity was only set to 19... </p>

<p>I wouldn&#39;t recommend going above 10, however. Your computer might have a hard time generating the condition. When I pasted that code into Visual Studio, it insta-crashed on this pc <strong>x_x</strong></p>

<h3><u>What my initial intentions were</u></h3>

<p>I initially intended to make an algorithm that would do the following:
<pre><code class="hljs csharp">
int no = 0;
while(no != 10)
{
    no++;
}</p>

<h2></code></pre></h2>

<p>Converted to:
<pre><code class="hljs csharp">
private int Do(int no){
return no+=1;
}
private bool Check(int no){
return no != 10;
}
int no = 0;
:foo
no = Do(no);
if(!Check(no)){
goto foo;
}
</code></pre></p>

<p>Notice how the code is now suddenly more complex. Making that code is quite complex, though, because you will need to work out which variables to pass etc etc. I somehow started experimenting with bools and now this happened.
I also made a method to actually parse the condition from a loop/statement:
<pre><code class="hljs csharp">public string GetBoolfloop(string lname, params string[]raw)
        {
            foreach (var loc in raw)
            {
                if (loc.Contains(lname))
                {
                    //Console.WriteLine(&quot;located loop def :&quot; + loc);
                    string only = loc.Substring(loc.IndexOf(lname));
                   // Console.WriteLine(&quot;isolated: &quot;+only);
                    string boolarg = &quot;&quot;;
                    bool started = false;
                    foreach (var s in only)
                    {
                        if (s == &#39;)&#39;) started = false;
                        if (started)
                        {
                            boolarg += s;
                        }
                        if (s == &#39;(&#39;) started = true;
                    }
                 //   Console.WriteLine(&quot;isolated boolarg: &quot; + boolarg);
                    return boolarg;
                }
            }
            return &quot;&quot;;
        }</code></pre>
And a method to get the code within the loop/statement:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="kt">string</span> <span class="nf">GetCodefbrackets</span><span class="p">(</span><span class="kt">string</span> <span class="n">sbracket</span><span class="p">,</span><span class="kt">string</span> <span class="n">ebracket</span><span class="p">,</span> <span class="k">params</span> <span class="kt">string</span><span class="p">[]</span> <span class="n">code</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">string</span> <span class="n">ret</span> <span class="p">=</span> <span class="s">""</span><span class="p">;</span>
            <span class="kt">bool</span> <span class="n">started</span> <span class="p">=</span> <span class="k">false</span><span class="p">;</span>
            <span class="k">foreach</span> <span class="p">(</span><span class="n">var</span> <span class="n">loc</span> <span class="k">in</span> <span class="n">code</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">loc</span><span class="p">.</span><span class="nf">Contains</span><span class="p">(</span><span class="n">ebracket</span><span class="p">))</span>
                <span class="p">{</span>
                    <span class="n">started</span> <span class="p">=</span> <span class="k">false</span><span class="p">;</span>
                    <span class="n">ret</span> <span class="p">+=</span> <span class="n">Environment</span><span class="p">.</span><span class="n">NewLine</span><span class="p">+</span><span class="n">loc</span><span class="p">.</span><span class="nf">Replace</span><span class="p">(</span><span class="n">ebracket</span><span class="p">,</span> <span class="s">""</span><span class="p">);</span>
                    <span class="k">continue</span><span class="p">;</span>
                <span class="p">}</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">started</span><span class="p">)</span>
                <span class="p">{</span>
                    <span class="n">ret</span> <span class="p">+=</span> <span class="n">Environment</span><span class="p">.</span><span class="n">NewLine</span> <span class="p">+</span> <span class="n">loc</span><span class="p">;</span>
                <span class="p">}</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">loc</span><span class="p">.</span><span class="nf">Contains</span><span class="p">(</span><span class="n">sbracket</span><span class="p">))</span>
                <span class="p">{</span>
                    <span class="n">started</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span>
                    <span class="n">ret</span> <span class="p">+=</span> <span class="n">loc</span><span class="p">.</span><span class="nf">Substring</span><span class="p">(</span><span class="n">loc</span><span class="p">.</span><span class="nf">IndexOf</span><span class="p">(</span><span class="n">sbracket</span><span class="p">)+</span><span class="m">1</span><span class="p">);</span>
                 <span class="c1">//   Console.WriteLine(ret);
</span>                <span class="p">}</span>
            <span class="p">}</span>
            <span class="c1">//Console.WriteLine(ret);
</span>            <span class="k">return</span> <span class="n">ret</span><span class="p">;</span>
        <span class="p">}</span></code></pre></figure>

<hr>

<!-- footer -->

<p>Time taken to write: An hour and a bit</p>

<hr>

<!-- Ack -->

<p><small><small><small><a href="http://commons.wikimedia.org/wiki/File:Monotone_Boolean_functions.svg">Cover Image</a> by <a href="https://commons.wikimedia.org/wiki/User:David_Eppstein/Gallery">David Eppstein</a>. It has not been edited.</small></small></small></p>

	  ]]></description>
	</item>

	<item>
	  <title>Universal Program - Briefing</title>
	  <link>/UniversalProgramBriefing</link>
	  <author>PixelZerg</author>
	  <pubDate>2015-11-22T03:17:29+00:00</pubDate>
	  <guid>/UniversalProgramBriefing</guid>
	  <description><![CDATA[
	     <p>Here&#39;s a cool project i&#39;m starting. The aim is to port a single program into every coding language that I know. This is basically to familiarize myself with coding languages that I haven&#39;t done in a long time. I might even learn new coding languages just for this project. This is going to be great! But first, we must decide what the program must actually be.</p>

<h3><u>Stuff That Must be Included</u></h3>

<h5>Menu</h5>

<p>The program must contain a menu of some description with a list to select stuff included in the program. The user must be able to interact with the list and select items.
<ul><li>Orginisation</li><li>User Input</li><li>Printing</li><li>Basic Stuff</li></ul></p>

<hr>

<h5>Loading</h5>

<p>The program must display a loading animation. The loading percentage is also included in the console window&#39;s title.
<ul><li>Sleeping the Thread</li><li>Displaying Animation</li><li>Basic Text Stuff</li><li>Changing title</li></ul></p>

<hr>

<h5>Hangman</h5>

<p>There is a VERY BASIC hangman game included.
<ul><li>List/Array stuff<br><ul><li>Check if List Contains Item</li><li>Make a list</li></ul></li>
<li>Looks cool</li><li>Escaping text</li></ul></p>

<hr>

<h5>Higher or Lower Game</h5>

<p>A simple game. A random number is selected and the user must try to guess it. The program tells the user if they got the number right or it will tell them if the number they guessed was too high or too low.
<ul><li>Number Stuff</li><li>Checking if a number is greater than another number</li><li>parsing string into integer</li></ul></p>

<hr>

<h5>Rectangle Drawer</h5>

<p>The user will input X, Y co-ordinates and also Width and Height. The program will draw a rectangle.
<ul><li>graphics stuff</li><li>Getting User Input</li><li>While loops</li></ul></p>

<hr>

<h5>Libs</h5>

<p>The program asks the user for some words by their type (verb, adjective, noun, etc) and will then incorporate them into a story. This usually makes funny results. You can also save the generated story as a .txt file or other formats.
<ul><li>writing to a file</li><li>basic variable usage</li></ul></p>

<hr>

<h3>NB</h3>

<p>Note that not all of these features will be able to be implemented due to restrictions of the coding language itself and other restrictions. You may notice that the functionality of certain features vary in different coding languages due to said restrictions.</p>

<hr>

<!-- footer -->

<p>Time taken to write: 30 or so min.</p>

<hr>

<!-- Ack -->

<p><small><small><small><a href="https://www.flickr.com/photos/wneuheisel/5256103622">Cover Image</a> by William Neuheisel. It has not been edited.</small></small></small></p>

	  ]]></description>
	</item>

	<item>
	  <title>Batch to C# - Info</title>
	  <link>/Batch2Csharp</link>
	  <author>PixelZerg</author>
	  <pubDate>2015-10-29T03:50:29+00:00</pubDate>
	  <guid>/Batch2Csharp</guid>
	  <description><![CDATA[
	     <p>My first ever coding language was BATCH. Yes, the coding language for MS-DOS. I used it to make some really interesting things!</p>

<p>I once found myself browsing through the archives of my old computer and found some of my old BATCH files. The finding inspired me to make this program, a BATCH to C# converter.</p>

<p>I remember thinking to myself, you can pretty much do everything in BATCH with C#. Let&#39;s find out if I was right!</p>

<p>The program is written in a way such that the code can be translated into any other coding language, as long as there is a specific compiler for it. (modular format)</p>

<p>There is a central &quot;coding language&quot;, which basically contains all of the data you will need to do the conversion. Visibility of classes, code&#39;s function(to print text/pause/get user input/etc), methodnames, etc.</p>

<p>This batch to C# converter, however, is direct because I made the scripts for it before thinking of making the program modular.</p>

<hr>

<h3><u>Screenshots</u></h3>

<p>Here&#39;s what the UI looks like:
<img src="/assets/poststuff/1/1.jpg" alt="UI">
The comboboxes at the top are currently empty because the program isn&#39;t FULLY modular. Wouldn&#39;t be that hard to complete the modular system, though.</p>

<p>Let&#39;s run the code. Try and spot the difference between the C# output and BATCH outputt:
<img src="/assets/poststuff/1/2.jpg" alt="BATCH">
<img src="/assets/poststuff/1/3.jpg" alt="C#"></p>

<p>The first one is BATCH, the second one is C#.</p>

<p>You may have noticed, you can compile the C# script right from within the program. This is using the csc.exe file. You will be asked to navigate to it. It is usually in <pre><code class="hljs csharp">(drive [normally &quot;c&quot;]):\windows\Microsoft.NET\Framework\v(version)\csc.exe</code></pre>
This is, providing you have .net framework installed.</p>

<hr>

<h3><u>Batch's "method" execution system.</u></h3>

<p>Batch&#39;s methods are executed in a much more different way to C#&#39;s.
For example:
<pre><code class="hljs csharp">@echo off
echo foooo:
:foo
    echo Hello
    goto loo
:joo
    echo joo
:loo
    echo World
:noo
    echo !!!!!
    pause</code></pre>
Will have the output:
<pre><code class="hljs csharp">foooo:
Hello
World
!!!!!
Press any key to continue . . .</code></pre></p>

<p>Notice how the &quot;loo&quot; method goes directly to &quot;noo&quot; once it has finished executing.
Notice how the &quot;goto&quot; to &quot;loo&quot; doesn&#39;t return, rather it continues on to &quot;noo&quot;.</p>

<p>Let&#39;s imagine that the &quot;:&quot; defines a method. A port of the above code, in C# will look like:
<pre><code class="hljs csharp">
using System;</p>

<p>public class Program
{
    public static void Main()
    {Console.WriteLine(@&quot;foooo:&quot;);}
    public static void foo()
    {
        Console.WriteLine(&quot;Hello&quot;);
    }
    public static void joo()
    {
        Console.WriteLine(@&quot;joo&quot;);
    }
    public static void loo()
    {
        Console.WriteLine(@&quot;World&quot;);
    }
    public static void noo()
    {
        Console.WriteLine(@&quot;!!!!!&quot;);
        Console.WriteLine(&quot;Press any key to continue...&quot;); Console.ReadKey();
    }
}
</code></pre></p>

<p>The execution order here is definitely not the same. Here&#39;s the output:
<pre><code class="hljs csharp">foooo:</code></pre></p>

<hr>

<h3><u>Simulating this Execution Order in C#</u></h3>

<p>This is quite easy, all you have to do is make a list of all of the methods that you have in the batch script, in the order that they appear.</p>

<p>Then, when converting to C#, add a little line of code at the end which calls the next method. If there isnt a &quot;next method&quot;, then you know it must be the exit point of the application.</p>

<p>Here&#39;s what the compiler gives as output now:
<pre><code class="hljs csharp">
using System;</p>

<p>public class Program
{
    public static void Main()
    {
        Console.Clear(); //required line of code
        //echo is off from this point onwards!
        Console.WriteLine(@&quot;foooo:&quot;);
            foo(); //proceed to next method
    }
    public static void foo()
    {
        Console.WriteLine(@&quot;Hello&quot;);
        loo();
    }
    public static void joo()
    {
        Console.WriteLine(@&quot;joo&quot;);
            loo(); //proceed to next method
    }
    public static void loo()
    {
        Console.WriteLine(@&quot;World&quot;);
            noo(); //proceed to next method
    }
    public static void noo()
    {
        Console.WriteLine(@&quot;!!!!!&quot;);
        Console.WriteLine(&quot;Press any key to continue...&quot;); Console.ReadKey();
        Environment.Exit(0); //end of program
    }
}</p>

<h2></code></pre></h2>

<h3><u>Individual Line Handling</u></h3>

<h5>Console Output</h5>

<p>This is probably harder than what you might have expected at first.
<code>@echo foo</code> -&gt; <code>Console.WriteLine(&quot;foo&quot;);</code>
Simple as that!... right?</p>

<p>nope, we need to consider <var>all</var> of the scenarios. Here&#39;s what would currently happen in some scenarios:
<table><tbody>
<tr><th>Batch</th><th>C#</th><th>Output Batch</th><th>Output C#</th></tr>
<tr><td><code>@echo &quot;hello&quot;</code></td><td><code>Console.WriteLine(&quot;&quot;hello&quot;&quot;);</code></td><td>&quot;hello&quot;</td><td>Does Not Compile</td></tr>
<tr><td><code>@echo %moo%</code></td><td><code>Console.WriteLine(&quot;%moo%&quot;);</code></td><td>vardata</td><td>%moo%</td></tr>
</tbody></table></p>

<p>The first issue is quite easy to solve, you just have to turn the string into a literal string <strong>or</strong> you can add the correct escape sequence.</p>

<p>The second issue will need some parsing.
Let&#39;s look at it again:
<code>@echo %moo%</code>
<ol>
<li>Get the position of the first &quot;%&quot;, done using string.instanceOf();</li>
<li>Get the position of the second &quot;%&quot;, done by converting string into char array and cycling through</li>
<li>Get the variable name by using substring.</li>
</ol></p>

<p>And now that you have the variable name, in the C# version you must remember to:
<ol>
<li>Add an ending quotation mark</li>
<li>Add a plus symbol</li>
<li>Add the variable name</li>
<li>Add another plus symbol</li>
<li>Add the literal string identifier &quot;@&quot;</li>
<li>Add a starting quotation mark</li>
</ol>
That&#39;s one way of doing it.
Another way of doing it, and perhaps a more efficient way of doing it is that you just replace the two &quot;%&quot; symbols with a quotation mark and a plus or a plus then a quotation mark respectively.</p>

<p>So now the C# version is:
<code>Console.WriteLine(@&quot;&quot;+moo+@&quot;&quot;);</code></p>

<p>Great, it&#39;s done!
Nope... we still have not done every scenario.</p>

<p>What would happen in this scenario:</p>

<p><code>@echo var</code> -&gt; <code>Console.WriteLine(@&quot;&quot;+var+@&quot;&quot;);</code></p>

<p>Most of you can probably immediately see that this is wrong.
&quot;var&quot; can&#39;t be set as a variable name in C# because the compiler will think your using it as a type.</p>

<p>Solution?
All variables that are defined or called must have a &quot;@&quot; symbol in front of them.</p>

<p>Now the C# version is:
<code>Console.WriteLine(@&quot;&quot;+@moo+@&quot;&quot;);</code>
Great! I&#39;m satisfied!</p>

<h5>Colour</h5>

<p>AKA &quot;color&quot;...
This command in cmd paints the background a specific colour.
The first letter/number corresponds to the foreground, the second corresponds to the background.
Implementing that is not that hard at all. All you really need is a <code>dictionary</code> with <code>keys</code> of the letters and <code>values</code> of <code>consolecolor</code> values.</p>

<p>Then you could just simply do <pre><code class="hljs csharp">Console.ForegroundColour =dictionary[string[0]];
Console.BackgroundColour = dictionary[string[1]];</code></pre></p>

<p>Notice anything missing?
When the color command is called in cmd, the console&#39;s entire background/foreground gets repainted as that colour.
Let&#39;s implement that then!</p>

<p>Here&#39;s what the program outputs when <code>@color AE</code> is inputted:
<pre><code class="hljs csharp">using System;</p>

<p>public class Program
{
    public static void Main()
    {
        Console.BackgroundColor = ConsoleColor.Green;</p>
<div class="highlight"><pre><code class="language-" data-lang="">        int KXLXFHICTGUWIDTQQGWJJ = 0;int RVBABPYMZLKWVTNYAFGQPFE = Console.CursorLeft;int ODYYECCLDAQMQOVPMXFJKY = Console.CursorTop;while (KXLXFHICTGUWIDTQQGWJJ != Console.WindowHeight)
        {int KROYBEJQZZQLDWEBMNRA = 0;while (KROYBEJQZZQLDWEBMNRA != Console.WindowWidth){Console.Write(" ");KROYBEJQZZQLDWEBMNRA++;}KXLXFHICTGUWIDTQQGWJJ++;}Console.SetCursorPosition(RVBABPYMZLKWVTNYAFGQPFE, ODYYECCLDAQMQOVPMXFJKY);
</code></pre></div>
<p>Console.ForegroundColor = ConsoleColor.Yellow;
        Environment.Exit(0); //end of program
    }
}</code></pre></p>

<p>It&#39;s just a basic implementation of repainting the console background by filling it in with empty space.
The variable names that are required to do this are randomly generated.</p>

<p>There is one problem with this, however, any text that was on the screen before is going to be shifted up and off the console window.
There is a way to fix this, by repainting all the text on too, by storing all the text in a string builder and then setting console&#39;s cursor position to the top left corner of the console, then re-printing the words and then setting the cursor position back to normal.
This project, at the time of writing, has been deprecated long ago so I haven&#39;t implemented that.</p>

<p>This will do for now!</p>

<h5>pause</h5>

<p>The program converts the pause command to:
<pre><code class="hljs csharp">Console.WriteLine(&quot;Press any key to continue...&quot;); Console.ReadKey();</code></pre>
Pretty self-explanatory...</p>

<h5>ECHO</h5>

<p>In batch, when you run a command, the command is echoed in the console and then executed:</p>

<pre><code class="hljs csharp">Console.WriteLine(System.Environment.CurrentDirectory+">SET /p var="); //echo is on so printing command</code></pre>

<p>This has been simulated in this program. The program also recognises <code>@echo off</code> and <code>@echo on</code> commands.
The program will not print the command if <code>echo</code> is off or if the line of code has a &quot;@&quot; before it (just like batch).</p>

<p>My aim is for the output to look exactly the same for both scripts. It wouldn&#39;t really look the same if the <code>echo</code> features were not implemented.</p>

<p>The only thing that makes it look slightly different is the thing with the color command.</p>

<h5>Variable Setting</h5>

<p>This is pretty self-explanatory:
<table>
<tbody>
<tr><th>Batch</th><th>C#</th></tr>
<tr><td><code>SET /p var=</code></td><td><code>var @var = Console.ReadLine();</code></td></tr>
</tbody>
</table></p>

<p><strong>There is no arithmetic support! :(</strong></p>

<h5>Title</h5>

<p>This is rather straight forward.
<pre><code class="hljs csharp">@title banana<code>-&gt;</code>Console.Title = @&quot;banana&quot;;</code></pre></p>

<hr>

<h6>Many batch features are supported. Many were probably not even mentioned here. At the end of the day, this is just proof of concept! Give the program a go if you want. The source is also available.</h6>

<hr>

<!-- footer -->

<p>Time taken to write: 4-5h</p>

<hr>

<!-- Ack -->

<p><small><small><small><a href="https://en.wikipedia.org/wiki/Colossal_Cave_Adventure#/media/File:Colossal_Cave_Adventure_on_VT100_terminal.jpg">Cover Image</a> by Autopilot. Has not been edited.</small></small></small></p>

	  ]]></description>
	</item>


</channel>
</rss>
