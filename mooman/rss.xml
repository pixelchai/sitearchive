
	<item>
	  <title>Batch to C# - Info</title>
	  <link>/dotnet/mooman/Batch2Csharp/</link>
	  <author></author>
	  <pubDate>2015-10-29T00:00:00+00:00</pubDate>
	  <guid>/dotnet/mooman/Batch2Csharp/</guid>
	  <description><![CDATA[
	     <p>My first ever coding language was BATCH. Yes, the coding language for MS-DOS. I used it to make some really interesting things!</p>

<p>I once found myself browsing through the archives of my old computer and found some of my old BATCH files. The finding inspired me to make this program, a BATCH to C# converter.</p>

<p>I remember thinking to myself, you can pretty much do everything in BATCH with C#. Let’s find out if I was right!</p>

<p>The program is written in a way such that the code can be translated into any other coding language, as long as there is a specific compiler for it. (modular format)</p>

<p>There is a central “coding language”, which basically contains all of the data you will need to do the conversion. Visibility of classes, code’s function(to print text/pause/get user input/etc), methodnames, etc.</p>

<p>This batch to C# converter, however, is direct because I made the scripts for it before thinking of making the program modular.</p>

<hr />
<h3><u>Screenshots</u></h3>
<p>Here’s what the UI looks like:
<img src="/assets/poststuff/1/1.jpg" alt="UI" />
The comboboxes at the top are currently empty because the program isn’t FULLY modular. Wouldn’t be that hard to complete the modular system, though.</p>

<p>Let’s run the code. Try and spot the difference between the C# output and BATCH outputt:
<img src="/assets/poststuff/1/2.jpg" alt="BATCH" />
<img src="/assets/poststuff/1/3.jpg" alt="C#" /></p>

<p>The first one is BATCH, the second one is C#.</p>

<p>You may have noticed, you can compile the C# script right from within the program. This is using the csc.exe file. You will be asked to navigate to it. It is usually in</p>
<div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="p">(</span><span class="n">drive</span> <span class="p">[</span><span class="n">normally</span> <span class="s">&quot;c&quot;</span><span class="p">]):</span><span class="err">\</span><span class="n">windows</span><span class="err">\</span><span class="n">Microsoft</span><span class="p">.</span><span class="n">NET</span><span class="err">\</span><span class="n">Framework</span><span class="err">\</span><span class="n">v</span><span class="p">(</span><span class="n">version</span><span class="p">)</span><span class="err">\</span><span class="n">csc</span><span class="p">.</span><span class="n">exe</span></code></pre></div>

<p>This is, providing you have .net framework installed.</p>

<hr />
<h3><u>Batch's "method" execution system.</u></h3>
<p>Batch’s methods are executed in a much more different way to C#’s.
For example:</p>

<div class="highlight"><pre><code class="language-batch" data-lang="batch"><span class="p">@</span><span class="k">echo</span> <span class="k">off</span>
<span class="k">echo</span> foooo:
<span class="nl">:foo</span>
    <span class="k">echo</span> Hello
    <span class="k">goto</span> <span class="nl">loo</span>
<span class="nl">:joo</span>
    <span class="k">echo</span> joo
<span class="nl">:loo</span>
    <span class="k">echo</span> World
<span class="nl">:noo</span>
    <span class="k">echo</span> !!!!!
    <span class="k">pause</span></code></pre></div>

<p>Will have the output:</p>

<div class="highlight"><pre><code class="language-batch" data-lang="batch">foooo:
Hello
World
!!!!!
Press any key to continue . . .</code></pre></div>

<p>Notice how the “loo” method goes directly to “noo” once it has finished executing.
Notice how the “goto” to “loo” doesn’t return, rather it continues on to “noo”.</p>

<p>Let’s imagine that the “:” defines a method. A port of the above code, in C# will look like:</p>

<div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">Program</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">()</span>
    <span class="p">{</span><span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">@&quot;foooo:&quot;</span><span class="p">);}</span>
    <span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">foo</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;Hello&quot;</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">joo</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">@&quot;joo&quot;</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">loo</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">@&quot;World&quot;</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">noo</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">@&quot;!!!!!&quot;</span><span class="p">);</span>
        <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;Press any key to continue...&quot;</span><span class="p">);</span> <span class="n">Console</span><span class="p">.</span><span class="n">ReadKey</span><span class="p">();</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></div>

<p>The execution order here is definitely not the same. Here’s the output:</p>

<div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">foooo</span><span class="p">:</span></code></pre></div>

<hr />
<h3><u>Simulating this Execution Order in C#</u></h3>

<p>This is quite easy, all you have to do is make a list of all of the methods that you have in the batch script, in the order that they appear.</p>

<p>Then, when converting to C#, add a little line of code at the end which calls the next method. If there isnt a “next method”, then you know it must be the exit point of the application.</p>

<p>Here’s what the compiler gives as output now:</p>

<div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">Program</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="n">Console</span><span class="p">.</span><span class="n">Clear</span><span class="p">();</span> <span class="c1">//required line of code</span>
        <span class="c1">//echo is off from this point onwards!</span>
        <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">@&quot;foooo:&quot;</span><span class="p">);</span>
            <span class="n">foo</span><span class="p">();</span> <span class="c1">//proceed to next method</span>
    <span class="p">}</span>
    <span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">foo</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">@&quot;Hello&quot;</span><span class="p">);</span>
        <span class="n">loo</span><span class="p">();</span>
    <span class="p">}</span>
    <span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">joo</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">@&quot;joo&quot;</span><span class="p">);</span>
            <span class="n">loo</span><span class="p">();</span> <span class="c1">//proceed to next method</span>
    <span class="p">}</span>
    <span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">loo</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">@&quot;World&quot;</span><span class="p">);</span>
            <span class="n">noo</span><span class="p">();</span> <span class="c1">//proceed to next method</span>
    <span class="p">}</span>
    <span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">noo</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">@&quot;!!!!!&quot;</span><span class="p">);</span>
        <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;Press any key to continue...&quot;</span><span class="p">);</span> <span class="n">Console</span><span class="p">.</span><span class="n">ReadKey</span><span class="p">();</span>
        <span class="n">Environment</span><span class="p">.</span><span class="n">Exit</span><span class="p">(</span><span class="m">0</span><span class="p">);</span> <span class="c1">//end of program</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></div>

<hr />
<h3><u>Individual Line Handling</u></h3>
<h5>Console Output</h5>
<p>This is probably harder than what you might have expected at first.
<code>@echo foo</code> -&gt; <code>Console.WriteLine("foo");</code>
Simple as that!… right?</p>

<p>nope, we need to consider <var>all</var> of the scenarios. Here’s what would currently happen in some scenarios:</p>
<table><tbody>
<tr><th>Batch</th><th>C#</th><th>Output Batch</th><th>Output C#</th></tr>
<tr><td>`@echo "hello"`</td><td>`Console.WriteLine(""hello"");`</td><td>"hello"</td><td>Does Not Compile</td></tr>
<tr><td>`@echo %moo%`</td><td>`Console.WriteLine("%moo%");`</td><td>vardata</td><td>%moo%</td></tr>
</tbody></table>

<p>The first issue is quite easy to solve, you just have to turn the string into a literal string <strong>or</strong> you can add the correct escape sequence.</p>

<p>The second issue will need some parsing.
Let’s look at it again:
<code>@echo %moo%</code></p>
<ol>
<li>Get the position of the first "%", done using string.instanceOf();</li>
<li>Get the position of the second "%", done by converting string into char array and cycling through</li>
<li>Get the variable name by using substring.</li>
</ol>

<p>And now that you have the variable name, in the C# version you must remember to:</p>
<ol>
<li>Add an ending quotation mark</li>
<li>Add a plus symbol</li>
<li>Add the variable name</li>
<li>Add another plus symbol</li>
<li>Add the literal string identifier "@"</li>
<li>Add a starting quotation mark</li>
</ol>
<p>That’s one way of doing it.
Another way of doing it, and perhaps a more efficient way of doing it is that you just replace the two “%” symbols with a quotation mark and a plus or a plus then a quotation mark respectively.</p>

<p>So now the C# version is:
<code>Console.WriteLine(@""+moo+@"");</code></p>

<p>Great, it’s done!
Nope… we still have not done every scenario.</p>

<p>What would happen in this scenario:</p>

<p><code>@echo var</code> -&gt; <code>Console.WriteLine(@""+var+@"");</code></p>

<p>Most of you can probably immediately see that this is wrong.
“var” can’t be set as a variable name in C# because the compiler will think your using it as a type.</p>

<p>Solution?
All variables that are defined or called must have a “@” symbol in front of them.</p>

<p>Now the C# version is:
<code>Console.WriteLine(@""+@moo+@"");</code>
Great! I’m satisfied!</p>

<h5>Colour</h5>
<p>AKA “color”…
This command in cmd paints the background a specific colour.
The first letter/number corresponds to the foreground, the second corresponds to the background.
Implementing that is not that hard at all. All you really need is a <code>dictionary</code> with <code>keys</code> of the letters and <code>values</code> of <code>consolecolor</code> values.</p>

<p>Then you could just simply do</p>
<div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">Console</span><span class="p">.</span><span class="n">ForegroundColour</span> <span class="p">=</span><span class="n">dictionary</span><span class="p">[</span><span class="kt">string</span><span class="p">[</span><span class="m">0</span><span class="p">]];</span>
<span class="n">Console</span><span class="p">.</span><span class="n">BackgroundColour</span> <span class="p">=</span> <span class="n">dictionary</span><span class="p">[</span><span class="kt">string</span><span class="p">[</span><span class="m">1</span><span class="p">]];</span></code></pre></div>

<p>Notice anything missing?
When the color command is called in cmd, the console’s entire background/foreground gets repainted as that colour.
Let’s implement that then!</p>

<p>Here’s what the program outputs when <code>@color AE</code> is inputted:</p>

<div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">Program</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="n">Console</span><span class="p">.</span><span class="n">BackgroundColor</span> <span class="p">=</span> <span class="n">ConsoleColor</span><span class="p">.</span><span class="n">Green</span><span class="p">;</span>

            <span class="kt">int</span> <span class="n">KXLXFHICTGUWIDTQQGWJJ</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span><span class="kt">int</span> <span class="n">RVBABPYMZLKWVTNYAFGQPFE</span> <span class="p">=</span> <span class="n">Console</span><span class="p">.</span><span class="n">CursorLeft</span><span class="p">;</span><span class="kt">int</span> <span class="n">ODYYECCLDAQMQOVPMXFJKY</span> <span class="p">=</span> <span class="n">Console</span><span class="p">.</span><span class="n">CursorTop</span><span class="p">;</span><span class="k">while</span> <span class="p">(</span><span class="n">KXLXFHICTGUWIDTQQGWJJ</span> <span class="p">!=</span> <span class="n">Console</span><span class="p">.</span><span class="n">WindowHeight</span><span class="p">)</span>
            <span class="p">{</span><span class="kt">int</span> <span class="n">KROYBEJQZZQLDWEBMNRA</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span><span class="k">while</span> <span class="p">(</span><span class="n">KROYBEJQZZQLDWEBMNRA</span> <span class="p">!=</span> <span class="n">Console</span><span class="p">.</span><span class="n">WindowWidth</span><span class="p">){</span><span class="n">Console</span><span class="p">.</span><span class="n">Write</span><span class="p">(</span><span class="s">&quot; &quot;</span><span class="p">);</span><span class="n">KROYBEJQZZQLDWEBMNRA</span><span class="p">++;}</span><span class="n">KXLXFHICTGUWIDTQQGWJJ</span><span class="p">++;}</span><span class="n">Console</span><span class="p">.</span><span class="n">SetCursorPosition</span><span class="p">(</span><span class="n">RVBABPYMZLKWVTNYAFGQPFE</span><span class="p">,</span> <span class="n">ODYYECCLDAQMQOVPMXFJKY</span><span class="p">);</span>
<span class="n">Console</span><span class="p">.</span><span class="n">ForegroundColor</span> <span class="p">=</span> <span class="n">ConsoleColor</span><span class="p">.</span><span class="n">Yellow</span><span class="p">;</span>
        <span class="n">Environment</span><span class="p">.</span><span class="n">Exit</span><span class="p">(</span><span class="m">0</span><span class="p">);</span> <span class="c1">//end of program</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></div>

<p>It’s just a basic implementation of repainting the console background by filling it in with empty space.
The variable names that are required to do this are randomly generated.</p>

<p>There is one problem with this, however, any text that was on the screen before is going to be shifted up and off the console window.
There is a way to fix this, by repainting all the text on too, by storing all the text in a string builder and then setting console’s cursor position to the top left corner of the console, then re-printing the words and then setting the cursor position back to normal.
This project, at the time of writing, has been deprecated long ago so I haven’t implemented that.</p>

<p>This will do for now!</p>

<h5>pause</h5>
<p>The program converts the pause command to:</p>

<div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;Press any key to continue...&quot;</span><span class="p">);</span> <span class="n">Console</span><span class="p">.</span><span class="n">ReadKey</span><span class="p">();</span></code></pre></div>

<p>Pretty self-explanatory…</p>

<h5>ECHO</h5>
<p>In batch, when you run a command, the command is echoed in the console and then executed:</p>

<div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">System</span><span class="p">.</span><span class="n">Environment</span><span class="p">.</span><span class="n">CurrentDirectory</span><span class="p">+</span><span class="s">&quot;&gt;SET /p var=&quot;</span><span class="p">);</span> <span class="c1">//echo is on so printing command</span></code></pre></div>

<p>This has been simulated in this program. The program also recognises <code>@echo off</code> and <code>@echo on</code> commands.
The program will not print the command if <code>echo</code> is off or if the line of code has a “@” before it (just like batch).</p>

<p>My aim is for the output to look exactly the same for both scripts. It wouldn’t really look the same if the <code>echo</code> features were not implemented.</p>

<p>The only thing that makes it look slightly different is the thing with the color command.</p>

<h5>Variable Setting</h5>
<p>This is pretty self-explanatory:</p>
<table>
<tbody>
<tr><th>Batch</th><th>C#</th></tr>
<tr><td>`SET /p var=`</td><td>`var @var = Console.ReadLine();`</td></tr>
</tbody>
</table>

<p><strong>There is no arithmetic support! :(</strong></p>

<h5>Title</h5>
<p>This is rather straight forward.</p>

<div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">@title</span> <span class="n">banana</span><span class="err">`</span> <span class="p">-&gt;</span> <span class="err">`</span><span class="n">Console</span><span class="p">.</span><span class="n">Title</span> <span class="p">=</span> <span class="s">@&quot;banana&quot;</span><span class="p">;</span></code></pre></div>

<hr />
<h6>Many batch features are supported. Many were probably not even mentioned here. At the end of the day, this is just proof of concept! Give the program a go if you want. The source is also available.</h6>
<hr />
<!-- footer -->
<p>Time taken to write: 4-5h</p>

<hr />
<!-- Ack -->

	  ]]></description>
	</item>

